// src/hooks/useSessionTimeout.js - VERS√ÉO CORRIGIDA COM DEBUG
import { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import apiService from '../services/apiService';

const useSessionTimeout = () => {
  const { logout, isAuthenticated } = useAuth();
  
  // Estados b√°sicos
  const [showWarning, setShowWarning] = useState(false);
  const [timeLeft, setTimeLeft] = useState(120); // 2 horas em minutos
  const [isEditingActive, setIsEditingActive] = useState(false);
  
  // Refs para controle
  const isLoggingOut = useRef(false);
  const sessionCheckActive = useRef(true);
  const lastCheckTime = useRef(0);
  const consecutiveErrors = useRef(0);

  // Verificar status da sess√£o com controle de frequ√™ncia
  useEffect(() => {
    if (!isAuthenticated || isLoggingOut.current) {
      sessionCheckActive.current = false;
      return;
    }

    sessionCheckActive.current = true;
    consecutiveErrors.current = 0;

    const checkSession = async () => {
      // Evitar verifica√ß√µes muito frequentes
      const now = Date.now();
      const timeSinceLastCheck = now - lastCheckTime.current;
      const minInterval = 120000; // 2 minutos
      
      if (timeSinceLastCheck < minInterval) {
        console.log(`üïê Verifica√ß√£o de sess√£o ignorada - muito recente (${Math.round(timeSinceLastCheck/1000)}s atr√°s)`);
        return;
      }

      // Se j√° est√° fazendo logout ou n√£o est√° autenticado, n√£o verificar
      if (isLoggingOut.current || !sessionCheckActive.current || !isAuthenticated) {
        console.log('üö´ Verifica√ß√£o cancelada - logout em andamento ou n√£o autenticado');
        return;
      }

      console.log('üîç Iniciando verifica√ß√£o de sess√£o...');
      lastCheckTime.current = now;

      try {
        // Verificar se temos token antes de fazer a requisi√ß√£o
        const token = apiService.getToken();
        if (!token) {
          console.error('‚ùå Token n√£o encontrado no localStorage');
          throw new Error('Token n√£o encontrado');
        }

        console.log(`üì° Fazendo requisi√ß√£o para session-status (token presente: ${token.substring(0, 20)}...)`);
        const response = await apiService.get('/auth/session-status');
        
        console.log('‚úÖ Resposta da verifica√ß√£o de sess√£o:', {
          success: response.success,
          expires_in: response.expires_in,
          warning: response.warning,
          time_left_minutes: response.time_left_minutes
        });
        
        if (response.success) {
          consecutiveErrors.current = 0; // Reset contador de erros
          
          const minutesLeft = response.time_left_minutes || Math.floor(response.expires_in / 60);
          setTimeLeft(minutesLeft);
          
          console.log(`‚è±Ô∏è Tempo restante: ${minutesLeft} minutos`);
          
          // Mostrar aviso se restam menos de 30 minutos E n√£o est√° editando
          if (response.warning && !showWarning && !isEditingActive) {
            console.log('‚ö†Ô∏è Sess√£o expirando em breve, mostrando aviso');
            setShowWarning(true);
          } else if (!response.warning && showWarning) {
            console.log('‚úÖ Sess√£o n√£o est√° mais na zona de aviso, ocultando');
            setShowWarning(false);
          }
        } else {
          console.error('‚ùå Resposta de sess√£o inv√°lida:', response);
          throw new Error(response.message || 'Resposta inv√°lida do servidor');
        }
        
      } catch (error) {
        consecutiveErrors.current++;
        console.error(`‚ùå Erro ao verificar sess√£o (tentativa ${consecutiveErrors.current}):`, {
          message: error.message,
          status: error.status,
          name: error.name
        });
        
        // S√≥ fazer logout ap√≥s m√∫ltiplos erros consecutivos
        if (consecutiveErrors.current >= 5) {
          console.log('üö® M√∫ltiplos erros de sess√£o detectados, fazendo logout...');
          
          // Se for erro de autentica√ß√£o e n√£o est√° j√° fazendo logout
          if (!isLoggingOut.current && 
              (error.message.includes('Sess√£o') || 
               error.message.includes('Token') || 
               error.message.includes('401') ||
               error.message.includes('expirada'))) {
            
            console.log('üö™ Sess√£o expirada detectada, fazendo logout...');
            isLoggingOut.current = true;
            sessionCheckActive.current = false;
            
            try {
              await logout();
            } catch (logoutError) {
              console.error('Erro no logout autom√°tico:', logoutError);
            }
          }
        } else {
          console.log(`‚è≥ Aguardando mais uma tentativa antes do logout (erros: ${consecutiveErrors.current}/2)`);
        }
      }
    };

    // Verifica√ß√£o inicial ap√≥s 10 segundos (mais tempo para o app inicializar)
    console.log('‚è∞ Agendando verifica√ß√£o inicial de sess√£o em 10 segundos');
    const initialTimeout = setTimeout(() => {
      if (sessionCheckActive.current && isAuthenticated) {
        console.log('üöÄ Executando verifica√ß√£o inicial de sess√£o');
        checkSession();
      }
    }, 10000); // 10 segundos

    // Verificar a cada 10 minutos (menos agressivo)
    console.log('‚è∞ Agendando verifica√ß√µes peri√≥dicas a cada 10 minutos');
    const interval = setInterval(() => {
      if (sessionCheckActive.current && isAuthenticated) {
        console.log('üîÑ Executando verifica√ß√£o peri√≥dica de sess√£o');
        checkSession();
      }
    }, 10 * 60 * 1000); // 10 minutos

    return () => {
      console.log('üßπ Limpando timers de verifica√ß√£o de sess√£o');
      clearTimeout(initialTimeout);
      clearInterval(interval);
      sessionCheckActive.current = false;
    };
  }, [isAuthenticated, showWarning, logout, isEditingActive]);

  // Reset quando o usu√°rio n√£o estiver mais autenticado
  useEffect(() => {
    if (!isAuthenticated) {
      console.log('üë§ Usu√°rio n√£o autenticado - resetando estado da sess√£o');
      setShowWarning(false);
      setTimeLeft(120);
      isLoggingOut.current = false;
      sessionCheckActive.current = false;
      consecutiveErrors.current = 0;
      lastCheckTime.current = 0;
    }
  }, [isAuthenticated]);

  // Fun√ß√£o para estender sess√£o
  const extendSession = useCallback(async () => {
    if (isLoggingOut.current) {
      console.log('‚ùå N√£o √© poss√≠vel estender sess√£o - logout em andamento');
      return false;
    }

    try {
      console.log('üîÑ Tentando estender sess√£o...');
      const response = await apiService.post('/auth/extend-session');
      
      if (response.success) {
        console.log('‚úÖ Sess√£o estendida pelo usu√°rio');
        setShowWarning(false);
        setTimeLeft(120); // Reset para 2 horas
        consecutiveErrors.current = 0; // Reset erros
        return true;
      } else {
        console.error('‚ùå Falha ao estender sess√£o:', response.message);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao estender sess√£o:', error);
      return false;
    }
  }, []);

  // Marcar in√≠cio de edi√ß√£o
  const startEditing = useCallback((context = 'unknown') => {
    console.log(`‚úèÔ∏è Iniciando edi√ß√£o: ${context}`);
    setIsEditingActive(true);
  }, []);

  // Marcar fim de edi√ß√£o
  const stopEditing = useCallback((context = 'unknown') => {
    console.log(`üíæ Finalizando edi√ß√£o: ${context}`);
    setIsEditingActive(false);
  }, []);

  // Resetar atividade
  const resetActivity = useCallback(() => {
    console.log('üîÑ Atividade resetada pelo usu√°rio');
    if (isAuthenticated && !isLoggingOut.current) {
      setTimeLeft(120);
      setShowWarning(false);
      consecutiveErrors.current = 0;
    }
  }, [isAuthenticated]);

  // Verificar se est√° no grace period
  const isInGracePeriod = useCallback(() => {
    return isEditingActive;
  }, [isEditingActive]);

  // Debug info para desenvolvimento
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üêõ Debug useSessionTimeout:', {
        isAuthenticated,
        showWarning,
        timeLeft,
        isEditingActive,
        isLoggingOut: isLoggingOut.current,
        sessionCheckActive: sessionCheckActive.current,
        consecutiveErrors: consecutiveErrors.current,
        timeSinceLastCheck: lastCheckTime.current ? Date.now() - lastCheckTime.current : 'never'
      });
    }
  }, [isAuthenticated, showWarning, timeLeft, isEditingActive]);

  return {
    showWarning,
    timeLeft,
    isEditingActive,
    isInGracePeriod: isInGracePeriod(),
    extendSession,
    startEditing,
    stopEditing,
    resetActivity,
    // Debug info para desenvolvimento
    debug: process.env.NODE_ENV === 'development' ? {
      consecutiveErrors: consecutiveErrors.current,
      lastCheckTime: lastCheckTime.current,
      sessionCheckActive: sessionCheckActive.current
    } : null
  };
};

export default useSessionTimeout;