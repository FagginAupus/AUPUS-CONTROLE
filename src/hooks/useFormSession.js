// src/hooks/useFormSession.js - VERS√ÉO B√ÅSICA INICIAL
import { useCallback } from 'react';

/**
 * Hook b√°sico para gerenciar sess√£o em formul√°rios
 * Vers√£o inicial simplificada
 */
const useFormSession = (sessionMethods = {}, formName = 'form') => {
  const { startEditing, stopEditing, resetActivity } = sessionMethods;

  // Fun√ß√£o para indicar in√≠cio de edi√ß√£o
  const handleStartEditing = useCallback(() => {
    if (startEditing) {
      startEditing(formName);
    }
    console.log(`üìù Iniciando edi√ß√£o do formul√°rio: ${formName}`);
  }, [startEditing, formName]);

  // Fun√ß√£o para indicar fim de edi√ß√£o
  const handleStopEditing = useCallback(() => {
    if (stopEditing) {
      stopEditing(formName);
    }
    console.log(`üíæ Finalizando edi√ß√£o do formul√°rio: ${formName}`);
  }, [stopEditing, formName]);

  // Fun√ß√£o para resetar atividade
  const handleResetActivity = useCallback(() => {
    if (resetActivity) {
      resetActivity();
    }
    console.log(`üîÑ Atividade resetada no formul√°rio: ${formName}`);
  }, [resetActivity, formName]);

  // Retornar m√©todos √∫teis para o formul√°rio
  return {
    startEditing: handleStartEditing,
    stopEditing: handleStopEditing,
    resetActivity: handleResetActivity,
    
    // M√©todos de conveni√™ncia
    onFormChange: () => {
      console.log('üìù Mudan√ßa detectada no formul√°rio');
      handleResetActivity();
    },
    onFormSubmit: () => {
      console.log('üì§ Formul√°rio submetido');
      handleStopEditing();
    },
    onFormSave: () => {
      console.log('üíæ Formul√°rio salvo');
      handleResetActivity();
      handleStopEditing();
    },
    onFormCancel: () => {
      console.log('‚ùå Formul√°rio cancelado');
      handleStopEditing();
    },
  };
};

export default useFormSession;